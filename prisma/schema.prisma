datasource db {
    provider = "postgres"
    url      = env("DATABASE_URL")
}

generator client {
    provider = "prisma-client-js"
}

generator erd {
    provider                  = "prisma-erd-generator"
    theme                     = "forest"
    includeRelationFromFields = true
}

model User {
    id                             String                          @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
    name                           String
    email                          String                          @unique
    emailVerified                  DateTime?
    image                          String?
    Profile                        UserProfile?
    Contacts                       UserContact[]
    Addresses                      UserAddress[]
    ProductReviews                 ProductReview[]
    StoreReviews                   StoreReview[]
    Stores                         Store[]
    StoreComplaints                StoreComplaint[]
    ProductWrongInformationReports ProductWrongInformationReport[]
    Complaints                     Complaint[]
    ProductQuestions               ProductQuestion[]
    ProductAnswers                 ProductAnswer[]
    Cart                           Cart?
    SavedForLaterProducts          SavedForLaterProducts?
    Orders                         Orders?
    Wishlists                      Wishlist[]
    OthersWishlist                 Wishlist[]                      @relation("othersWishlist")
    UserAction                     UserAction[]
    userTypeUserTypeId             String?                         @db.Uuid
    UserType                       UserType?                       @relation(fields: [userTypeUserTypeId], references: [userTypeId])

    createdAt DateTime  @default(now())
    updatedAt DateTime  @updatedAt
    deletedAt DateTime?

    UserAuthentication UserAuthentication?
    accounts           Account[]
    sessions           Session[]
}

model UserType {
    userTypeId                         String            @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
    name                               String            @unique
    Users                              User[]
    OfferForUserType                   OfferForUserType? @relation(fields: [offerForUserTypeOfferForUserTypeId], references: [offerForUserTypeId])
    offerForUserTypeOfferForUserTypeId String?           @db.Uuid
}

model UserAuthentication {
    userAuthenticationId String             @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
    userId               String             @unique @db.Uuid
    name                 String
    email                String             @unique
    emailVerified        DateTime?
    imageId              String?            @db.Uuid
    Image                Media?             @relation(fields: [imageId], references: [mediaId])
    User                 User               @relation(fields: [userId], references: [id])
    emailVerifiedAt      DateTime?
    currentpasswordId    String             @unique @db.Uuid
    CurrentPassword      Password           @relation(fields: [currentpasswordId], references: [passwordId])
    PasswordHistory      PasswordHistory[]
    SecurityQuestions    SecurityQuestion[]
    Session              Session[]
    // userDevices UserDevice[]
    // userLocations UserLocation[]
    // userNetworks UserNetwork[]
    LoginAttempts        LoginAttempts[]
    createdAt            DateTime           @default(now())
    updatedAt            DateTime           @updatedAt
    deletedAt            DateTime?
}

model PasswordHistory {
    passwordHistoryId    String             @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
    password             Password[]
    userAuthenticationId String             @db.Uuid
    UserAuthentication   UserAuthentication @relation(fields: [userAuthenticationId], references: [userAuthenticationId])
    createdAt            DateTime           @default(now())
    updatedAt            DateTime           @updatedAt
    deletedAt            DateTime?
}

model LoginAttempts {
    id                   String             @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
    userAuthenticationId String             @db.Uuid
    UserAuthentication   UserAuthentication @relation(fields: [userAuthenticationId], references: [userAuthenticationId])
    ipAddress            String
    userAgent            String
    success              Boolean
    timestamp            DateTime           @default(now())
    createdAt            DateTime           @default(now())
    updatedAt            DateTime           @updatedAt
    deletedAt            DateTime?
}

model Password {
    passwordId         String              @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
    UserAuthentication UserAuthentication?
    password           String
    salt               String
    numIterations      Int
    hashingAlgorithm   String
    PasswordHistory    PasswordHistory?    @relation(fields: [passwordHistoryId], references: [passwordHistoryId])
    passwordHistoryId  String?             @db.Uuid
    createdAt          DateTime            @default(now())
    updatedAt          DateTime            @updatedAt
    deletedAt          DateTime?
}

model SecurityQuestion {
    id                   String             @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
    userAuthenticationId String             @db.Uuid
    UserAuthentication   UserAuthentication @relation(fields: [userAuthenticationId], references: [userAuthenticationId])
    question             String
    answer               String
    hashingAlgorithm     String
    salt                 String
    iterations           Int
    createdAt            DateTime           @default(now())
    updatedAt            DateTime           @updatedAt
    deletedAt            DateTime?
}

model UserProfile {
    userProfileId    String          @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
    /// Set some max length limit
    name             String
    dob              DateTime?
    bio              String?
    profilePictureId String?         @db.Uuid
    ProfilePicture   ProfilePicture? @relation(fields: [profilePictureId], references: [profilePictureId])
    userId           String          @unique @db.Uuid
    User             User            @relation(fields: [userId], references: [id])
    genderId         String?         @db.Uuid
    Gender           Gender?         @relation(fields: [genderId], references: [id])
    createdAt        DateTime        @default(now())
    updatedAt        DateTime        @updatedAt
    deletedAt        DateTime?
}

model ProfilePicture {
    profilePictureId String        @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
    Media            Media         @relation(fields: [mediaId], references: [mediaId])
    mediaId          String        @db.Uuid
    type             String
    UserProfile      UserProfile[]
    createdAt        DateTime      @default(now())
    updatedAt        DateTime      @updatedAt
    deletedAt        DateTime?
}

model Gender {
    id           String        @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
    name         String        @unique
    UserProfiles UserProfile[]
    createdAt    DateTime      @default(now())
    updatedAt    DateTime      @updatedAt
    deletedAt    DateTime?
}

model UserAddress {
    userAddressId         String            @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
    line1                 String
    line2                 String?           @default("")
    zipcode               String
    cityId                String            @db.Uuid
    City                  City              @relation(fields: [cityId], references: [id])
    latitudeLongitudeId   String            @db.Uuid
    LatitudeLongitude     LatitudeLongitude @relation(fields: [latitudeLongitudeId], references: [latitudeLongitudeId])
    User                  User?             @relation(fields: [userInformationUserId], references: [id])
    userInformationUserId String?           @db.Uuid
    AddressType           UserAddressType?  @relation(fields: [userAddressTypeId], references: [userAddressTypeId])
    userAddressTypeId     String?           @db.Uuid
    Employee              Employee[]
    createdAt             DateTime          @default(now())
    updatedAt             DateTime          @updatedAt
    deletedAt             DateTime?
    OfferForRegion        OfferForRegion?   @relation(fields: [offerForRegionId], references: [offerForRegionId])
    offerForRegionId      String?           @db.Uuid
}

/// Address type can be home, office, billing, contact, etc.
model UserAddressType {
    userAddressTypeId String        @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
    name              String        @unique
    UserAddresses     UserAddress[]
    createdAt         DateTime      @default(now())
    updatedAt         DateTime      @updatedAt
    deletedAt         DateTime?
}

model Account {
    id                String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
    userId            String    @db.Uuid
    type              String
    provider          String
    providerAccountId String
    refresh_token     String?   @db.Text
    access_token      String?   @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String?   @db.Text
    session_state     String?
    user              User      @relation(fields: [userId], references: [id], onDelete: Cascade)
    createdAt         DateTime  @default(now())
    updatedAt         DateTime  @updatedAt
    deletedAt         DateTime?

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String   @db.Uuid
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

    machineIdentifier    String?
    UserAuthentication   UserAuthentication? @relation(fields: [userAuthenticationId], references: [userAuthenticationId])
    userAuthenticationId String?             @db.Uuid
    createdAt            DateTime            @default(now())
    updatedAt            DateTime            @updatedAt
    deletedAt            DateTime?
}

model Complaint {
    complaintId String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
    userId      String    @db.Uuid
    User        User      @relation(fields: [userId], references: [id])
    message     String
    createdAt   DateTime  @default(now())
    updatedAt   DateTime  @updatedAt
    deletedAt   DateTime?
}

model UserContact {
    userContactId         String           @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
    contact               String
    User                  User?            @relation(fields: [userInformationUserId], references: [id])
    userInformationUserId String?          @db.Uuid
    ContactType           UserContactType? @relation(fields: [contactTypeId], references: [id])
    contactTypeId         String?          @db.Uuid
    createdAt             DateTime         @default(now())
    updatedAt             DateTime         @updatedAt
    deletedAt             DateTime?
}

/// Types can be primary email, secondary email, primary phone, secondary phone, twitter, etc.
model UserContactType {
    id          String        @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
    name        String        @unique
    UserContact UserContact[]
    createdAt   DateTime      @default(now())
    updatedAt   DateTime      @updatedAt
    deletedAt   DateTime?
}

model Cart {
    cartId    String     @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
    user      User       @relation(fields: [userId], references: [id])
    userId    String     @unique @db.Uuid
    Items     CartItem[]
    createdAt DateTime   @default(now())
    updatedAt DateTime   @updatedAt
    deletedAt DateTime?
}

model CartItem {
    cartItemId String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
    cartId     String    @db.Uuid
    Cart       Cart      @relation(fields: [cartId], references: [cartId])
    Product    Product   @relation(fields: [productId], references: [productId])
    productId  String    @db.Uuid
    quantity   Int
    createdAt  DateTime  @default(now())
    updatedAt  DateTime  @updatedAt
    deletedAt  DateTime?
}

model SavedForLaterProducts {
    savedForLaterProductsId String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
    User                    User      @relation(fields: [userId], references: [id])
    userId                  String    @unique @db.Uuid
    Product                 Product[]
    createdAt               DateTime  @default(now())
    updatedAt               DateTime  @updatedAt
    deletedAt               DateTime?
}

model Wishlist {
    wishlistId      String         @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
    Products        WishlistItem[]
    AuthorizedUsers User[]         @relation("othersWishlist")
    createdAt       DateTime       @default(now())
    updatedAt       DateTime       @updatedAt
    deletedAt       DateTime?
    User            User?          @relation(fields: [userId], references: [id])
    userId          String?        @db.Uuid
}

model WishlistItem {
    wishlistItemId       String             @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
    wishlistId           String             @db.Uuid
    Wishlist             Wishlist           @relation(fields: [wishlistId], references: [wishlistId])
    productId            String             @db.Uuid
    Product              Product            @relation(fields: [productId], references: [productId])
    wishlistItemStatusId String             @db.Uuid
    Status               WishlistItemStatus @relation(fields: [wishlistItemStatusId], references: [wishlistItemStatusId])
    createdAt            DateTime           @default(now())
    updatedAt            DateTime           @updatedAt
    deletedAt            DateTime?
}

model WishlistItemStatus {
    wishlistItemStatusId String         @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
    WishlistItem         WishlistItem[]
    status               String
    createdAt            DateTime       @default(now())
    updatedAt            DateTime       @updatedAt
    deletedAt            DateTime?
}

model Orders {
    orderId    String      @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
    User       User        @relation(fields: [userId], references: [id])
    userId     String      @unique @db.Uuid
    OrderItems OrderItem[]
    createdAt  DateTime    @default(now())
    updatedAt  DateTime    @updatedAt
    deletedAt  DateTime?
}

model OrderItem {
    orderItemId     String            @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
    orderId         String            @db.Uuid
    Order           Orders            @relation(fields: [orderId], references: [orderId])
    Product         Product           @relation(fields: [productId], references: [productId])
    productId       String            @db.Uuid
    quantity        Int
    OrderStatus     OrderStatus       @relation(fields: [orderStatusId], references: [orderStatusId])
    orderStatusId   String            @db.Uuid
    Payment         Payment[]
    createdAt       DateTime          @default(now())
    updatedAt       DateTime          @updatedAt
    deletedAt       DateTime?
    DeliveryTracker DeliveryTracker[]
}

model OrderStatus {
    orderStatusId String      @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
    name          String
    Order         OrderItem[]
    createdAt     DateTime    @default(now())
    updatedAt     DateTime    @updatedAt
    deletedAt     DateTime?
}

model DeliveryRoute {
    id                String           @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
    Warehouse         Warehouse[]
    DeliveryTracker   DeliveryTracker? @relation(fields: [deliveryTrackerId], references: [id])
    deliveryTrackerId String?          @db.Uuid
    createdAt         DateTime         @default(now())
    updatedAt         DateTime         @updatedAt
    deletedAt         DateTime?
}

/// Out for delivery, Delivered, In transit, Pending, Cancelled
model DeliveryStatus {
    deliveryStatusId String            @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
    status           String
    createdAt        DateTime          @default(now())
    updatedAt        DateTime          @updatedAt
    deletedAt        DateTime?
    DeliveryTracker  DeliveryTracker[]
}

model DeliveryTracker {
    id               String          @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
    orderItemId      String          @db.Uuid
    Order            OrderItem       @relation(fields: [orderItemId], references: [orderItemId])
    Route            DeliveryRoute[]
    CurrentLocation  Warehouse       @relation(fields: [warehouseId], references: [warehouseId])
    Status           DeliveryStatus  @relation(fields: [deliveryStatusId], references: [deliveryStatusId])
    deliveryAgentId  String          @db.Uuid
    DeliveryAgent    DeliveryAgent?  @relation(fields: [deliveryAgentId], references: [deliveryAgentId])
    deliveryStatusId String          @db.Uuid
    warehouseId      String          @db.Uuid
    createdAt        DateTime        @default(now())
    updatedAt        DateTime        @updatedAt
    deletedAt        DateTime?
}

model PaymentMethod {
    paymentMethodId  String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
    name             String
    Payment          Payment[]
    Product          Product?  @relation(fields: [productProductId], references: [productId])
    productProductId String?   @db.Uuid
    createdAt        DateTime  @default(now())
    updatedAt        DateTime  @updatedAt
    deletedAt        DateTime?
}

model Payment {
    paymentId                    String        @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
    PaymentMethod                PaymentMethod @relation(fields: [paymentMethodPaymentMethodId], references: [paymentMethodId])
    paymentMethodId              String        @db.Uuid
    PaymentStatus                PaymentStatus @relation(fields: [paymentStatusPaymentStatusId], references: [paymentStatusId])
    paymentStatusId              String        @db.Uuid
    PaymentType                  PaymentType   @relation(fields: [paymentTypePaymentTypeId], references: [paymentTypeId])
    paymentTypeId                String        @db.Uuid
    paymentMethodPaymentMethodId String        @db.Uuid
    paymentStatusPaymentStatusId String        @db.Uuid
    paymentTypePaymentTypeId     String        @db.Uuid
    OrderItem                    OrderItem     @relation(fields: [orderItemId], references: [orderItemId])
    orderItemId                  String        @db.Uuid
    createdAt                    DateTime      @default(now())
    updatedAt                    DateTime      @updatedAt
    deletedAt                    DateTime?
}

model PaymentStatus {
    paymentStatusId String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
    name            String
    Payment         Payment[]
    createdAt       DateTime  @default(now())
    updatedAt       DateTime  @updatedAt
    deletedAt       DateTime?
}

model PaymentType {
    paymentTypeId String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
    name          String
    Payment       Payment[]
    createdAt     DateTime  @default(now())
    updatedAt     DateTime  @updatedAt
    deletedAt     DateTime?
}

// Types of a action, can be unregistered user, registered user, etc.
// It contains a json data object, that can be used to store data about the action, in a non-constrained schema
model Action {
    actionId     String     @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
    identifier   String
    Type         ActionType @relation(fields: [actionTypeId], references: [actionTypeId])
    createdAt    DateTime   @default(now())
    dataObject   Json
    updatedAt    DateTime   @updatedAt
    deletedAt    DateTime?
    actionTypeId String     @db.Uuid
}

model UserAction {
    userActionId String     @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
    userId       String     @db.Uuid
    User         User       @relation(fields: [userId], references: [id])
    Type         ActionType @relation(fields: [actionTypeId], references: [actionTypeId])
    dataObject   Json
    createdAt    DateTime   @default(now())
    updatedAt    DateTime   @updatedAt
    deletedAt    DateTime?
    actionTypeId String     @db.Uuid
}

model ActionType {
    actionTypeId String       @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
    Type         String       @unique
    Actions      Action[]
    UserActions  UserAction[]
    createdAt    DateTime     @default(now())
    updatedAt    DateTime     @updatedAt
    deletedAt    DateTime?
}

// Offers for products and its subtypes
model Offer {
    offerId          String             @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
    productId        String             @db.Uuid
    product          Product            @relation(fields: [productId], references: [productId])
    createdAt        DateTime           @default(now())
    updatedAt        DateTime           @updatedAt
    deletedAt        DateTime?
    OfferForInterval OfferForInterval[]
    OfferForRegion   OfferForRegion[]
    OfferForUserType OfferForUserType[]
}

model OfferForInterval {
    offerForIntervalId String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
    offerId            String    @db.Uuid
    Offer              Offer     @relation(fields: [offerId], references: [offerId])
    startTime          DateTime
    endTime            DateTime
    createdAt          DateTime  @default(now())
    updatedAt          DateTime  @updatedAt
    deletedAt          DateTime?
}

model OfferForRegion {
    offerForRegionId String        @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
    offerId          String        @db.Uuid
    Offer            Offer         @relation(fields: [offerId], references: [offerId])
    TargetRegion     UserAddress[]
    createdAt        DateTime      @default(now())
    updatedAt        DateTime      @updatedAt
    deletedAt        DateTime?
}

model OfferForUserType {
    offerForUserTypeId String     @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
    offerId            String     @db.Uuid
    Offer              Offer      @relation(fields: [offerId], references: [offerId])
    TargetUserType     UserType[]
    createdAt          DateTime   @default(now())
    updatedAt          DateTime   @updatedAt
    deletedAt          DateTime?
}

model Employee {
    employeeId         String           @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
    name               String
    email              String           @unique
    password           String
    Image              Media?           @relation(fields: [mediaMediaId], references: [mediaId])
    Position           EmployeePosition @relation(fields: [employeePositionId], references: [id])
    Address            UserAddress      @relation(fields: [addressId], references: [userAddressId])
    addressId          String           @db.Uuid
    salary             Int
    Department         Department       @relation(fields: [departmentID], references: [departmentId])
    departmentID       String           @db.Uuid
    mediaMediaId       String?          @db.Uuid
    employeePositionId String           @db.Uuid
    DeliveryAgent      DeliveryAgent?

    createdAt DateTime  @default(now())
    updatedAt DateTime  @updatedAt
    deletedAt DateTime?
}

model EmployeePosition {
    id          String     @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
    position    String
    description String
    Employee    Employee[]
    createdAt   DateTime   @default(now())
    updatedAt   DateTime   @updatedAt
    deletedAt   DateTime?
}

model Department {
    departmentId   String     @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
    departmentName String
    description    String
    Employee       Employee[]
    createdAt      DateTime   @default(now())
    updatedAt      DateTime   @updatedAt
    deletedAt      DateTime?
}

model DeliveryAgent {
    deliveryAgentId String                 @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
    employeeId      String                 @unique @db.Uuid
    Employee        Employee               @relation(fields: [employeeId], references: [employeeId])
    Contact         DeliveryAgentContact[]
    DeliveryTracker DeliveryTracker[]

    createdAt DateTime  @default(now())
    updatedAt DateTime  @updatedAt
    deletedAt DateTime?
}

model DeliveryAgentContact {
    deliveryAgentContactId String         @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
    deliveryAgentId        String?        @db.Uuid
    DeliveryAgent          DeliveryAgent? @relation(fields: [deliveryAgentId], references: [deliveryAgentId])
    contact                String
    createdAt              DateTime       @default(now())
    updatedAt              DateTime       @updatedAt
    deletedAt              DateTime?
}

model Warehouse {
    warehouseId                        String            @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
    name                               String
    Address                            WarehouseAddress?
    DeliveryTracker                    DeliveryTracker[]
    DeliveryRoute                      DeliveryRoute?    @relation(fields: [deliveryRouteId], references: [id])
    deliveryRouteId                    String?           @db.Uuid
    warehouseAddressWarehouseAddressId String?           @db.Uuid
    createdAt                          DateTime          @default(now())
    updatedAt                          DateTime          @updatedAt
    deletedAt                          DateTime?
}

model WarehouseAddress {
    warehouseAddressId     String                @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
    line1                  String
    line2                  String?               @default("")
    zipcode                String
    cityId                 String                @db.Uuid
    City                   City                  @relation(fields: [cityId], references: [id])
    latitudeLongitudeId    String                @db.Uuid
    latitudeLongitude      LatitudeLongitude     @relation(fields: [latitudeLongitudeId], references: [latitudeLongitudeId])
    Warehouse              Warehouse             @relation(fields: [warehouseId], references: [warehouseId])
    warehouseId            String                @unique @db.Uuid
    AddressType            WarehouseAddressType? @relation(fields: [warehouseAddressTypeId], references: [warehouseAddressTypeId])
    warehouseAddressTypeId String?               @db.Uuid
    createdAt              DateTime              @default(now())
    updatedAt              DateTime              @updatedAt
    deletedAt              DateTime?
}

model WarehouseAddressType {
    warehouseAddressTypeId String             @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
    addressType            String
    WarehouseAddress       WarehouseAddress[]
    createdAt              DateTime           @default(now())
    updatedAt              DateTime           @updatedAt
    deletedAt              DateTime?
}

model Brand {
    brandId   String       @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
    name      String       @unique
    Products  Product[]
    Media     BrandMedia[]
    Tags      BrandTag[]
    createdAt DateTime     @default(now())
    updatedAt DateTime     @updatedAt
    deletedAt DateTime?
}

model BrandMedia {
    brandMediaId String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
    brandId      String    @db.Uuid
    Brand        Brand     @relation(fields: [brandId], references: [brandId])
    mediaId      String    @db.Uuid
    Media        Media     @relation(fields: [mediaId], references: [mediaId])
    createdAt    DateTime  @default(now())
    updatedAt    DateTime  @updatedAt
    deletedAt    DateTime?
}

model Media {
    mediaId                 String                    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
    url                     String
    Brand                   BrandMedia[]
    Type                    MediaType                 @relation(fields: [mediaTypeMediaTypeId], references: [mediaTypeId])
    mediaTypeMediaTypeId    String                    @db.Uuid
    ProductDescriptionMedia ProductDescriptionMedia[]
    ProductMedia            ProductMedia[]
    StoreMedia              StoreMedia[]
    StoreReviewMedia        StoreReviewMedia[]
    ProductQuestionMedia    ProductQuestionMedia[]
    ProductAnswerMedia      ProductAnswerMedia[]
    ProductReviewMedia      ProductReviewMedia[]
    ProfilePicture          ProfilePicture[]
    UserAuthentication      UserAuthentication[]
    Employee                Employee[]
    createdAt               DateTime                  @default(now())
    updatedAt               DateTime                  @updatedAt
    deletedAt               DateTime?
    CategoryMedia           CategoryMedia[]
}

model MediaType {
    mediaTypeId String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
    name        String
    Media       Media[]
    createdAt   DateTime  @default(now())
    updatedAt   DateTime  @updatedAt
    deletedAt   DateTime?
}

model BrandTag {
    brandTagId String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
    name       String
    Brand      Brand[]
    createdAt  DateTime  @default(now())
    updatedAt  DateTime  @updatedAt
    deletedAt  DateTime?
}

model Store {
    storeId         String                      @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
    name            String
    userId          String                      @db.Uuid
    Manager         User                        @relation(fields: [userId], references: [id])
    description     String
    Contacts        StoreContact[]
    Media           StoreMedia[]
    Products        Product[]
    Tags            StoreTag[]
    Reviews         StoreReview[]
    CombinedReview  StoreReviewsCombinedResult?
    StoreComplaints StoreComplaint[]
    createdAt       DateTime                    @default(now())
    updatedAt       DateTime                    @updatedAt
    deletedAt       DateTime?
}

model StoreContact {
    userContactId String            @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
    contactType   String
    contact       String
    Store         Store?            @relation(fields: [storeID], references: [storeId])
    storeID       String?           @db.Uuid
    ContactType   StoreContactType? @relation(fields: [contactTypeId], references: [id])
    contactTypeId String?           @db.Uuid
    createdAt     DateTime          @default(now())
    updatedAt     DateTime          @updatedAt
    deletedAt     DateTime?
}

/// Types can be primary email, secondary email, primary phone, secondary phone, twitter, etc.
model StoreContactType {
    id           String         @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
    name         String         @unique
    UserContacts StoreContact[]
    createdAt    DateTime       @default(now())
    updatedAt    DateTime       @updatedAt
    deletedAt    DateTime?
}

model StoreComplaint {
    storeComplaintId String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
    userId           String    @db.Uuid
    User             User      @relation(fields: [userId], references: [id])
    message          String
    Store            Store?    @relation(fields: [storeStoreId], references: [storeId])
    storeStoreId     String?   @db.Uuid
    createdAt        DateTime  @default(now())
    updatedAt        DateTime  @updatedAt
    deletedAt        DateTime?
}

model StoreTag {
    id        String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
    name      String    @unique
    Stores    Store[]
    createdAt DateTime  @default(now())
    updatedAt DateTime  @updatedAt
    deletedAt DateTime?
}

model StoreMedia {
    id        String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
    storeId   String    @db.Uuid
    Store     Store     @relation(fields: [storeId], references: [storeId])
    Media     Media     @relation(fields: [mediaId], references: [mediaId])
    mediaId   String    @db.Uuid
    createdAt DateTime  @default(now())
    updatedAt DateTime  @updatedAt
    deletedAt DateTime?
}

model StoreReviewsCombinedResult {
    storeReviewCombinedResultsId String        @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
    storeId                      String        @unique @db.Uuid
    Store                        Store         @relation(fields: [storeId], references: [storeId])
    rating                       Float
    reviewCount                  Int
    StoreReviews                 StoreReview[]
    createdAt                    DateTime      @default(now())
    updatedAt                    DateTime      @updatedAt
    deletedAt                    DateTime?
}

model StoreReview {
    storeReviewId                 String                      @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
    userId                        String                      @db.Uuid
    User                          User                        @relation(fields: [userId], references: [id])
    storeId                       String                      @db.Uuid
    Store                         Store                       @relation(fields: [storeId], references: [storeId])
    rating                        Float
    Media                         StoreReviewMedia[]
    Tags                          StoreReviewTag[]
    content                       String?
    StoreReviewsCombinedResult    StoreReviewsCombinedResult? @relation(fields: [storeReviewsCombinedResultsId], references: [storeReviewCombinedResultsId])
    storeReviewsCombinedResultsId String?                     @db.Uuid
    createdAt                     DateTime                    @default(now())
    updatedAt                     DateTime                    @updatedAt
    deletedAt                     DateTime?
}

model StoreReviewTag {
    storeReviewTagId String        @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
    StoreReview      StoreReview[]
    tag              String        @unique
    createdAt        DateTime      @default(now())
    updatedAt        DateTime      @updatedAt
    deletedAt        DateTime?
}

model StoreReviewMedia {
    storeReviewMediaId String      @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
    mediaId            String      @db.Uuid
    Media              Media       @relation(fields: [mediaId], references: [mediaId])
    storeReviewId      String      @db.Uuid
    StoreReview        StoreReview @relation(fields: [storeReviewId], references: [storeReviewId])
    createdAt          DateTime    @default(now())
    updatedAt          DateTime    @updatedAt
    deletedAt          DateTime?
}

model Category {
    categoryId       String          @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
    name             String          @unique
    description      String
    tags             CategoryTag[]
    media            CategoryMedia[]
    parentCatetoryId String?         @db.Uuid
    ParentCategory   Category?       @relation("SubCategories", fields: [parentCatetoryId], references: [categoryId])
    subCategory      Category[]      @relation("SubCategories")
    Products         Product[]
    createdAt        DateTime        @default(now())
    updatedAt        DateTime        @updatedAt
    deletedAt        DateTime?
}

model CategoryTag {
    categoryTagId String     @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
    name          String     @unique
    Categories    Category[]
    createdAt     DateTime   @default(now())
    updatedAt     DateTime   @updatedAt
    deletedAt     DateTime?
}

model CategoryMedia {
    id         String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
    mediaId    String    @db.Uuid
    Media      Media     @relation(fields: [mediaId], references: [mediaId])
    categoryId String    @db.Uuid
    Category   Category  @relation(fields: [categoryId], references: [categoryId])
    createdAt  DateTime  @default(now())
    updatedAt  DateTime  @updatedAt
    deletedAt  DateTime?
}

model ProductInventory {
    productInventoryId String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
    price              Float
    stock              Int
    sold               Int
    comingSoon         Int
    Product            Product?  @relation(fields: [productId], references: [productId])
    productId          String?   @unique @db.Uuid
    createdAt          DateTime  @default(now())
    updatedAt          DateTime  @updatedAt
    deletedAt          DateTime?
}

model Product {
    productId          String            @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
    name               String
    productInventoryId String?           @db.Uuid
    ProductInventory   ProductInventory?

    description                   String
    Details                       ProductDetail[]
    createdAt                     DateTime                                      @default(now())
    updatedAt                     DateTime                                      @updatedAt
    deletedAt                     DateTime?
    Media                         ProductMedia[]
    Reviews                       ProductReview[]
    Questions                     ProductQuestion[]
    PaymentMethods                PaymentMethod[]
    giftOptionAvailable           Boolean
    WrongInformationReports       ProductWrongInformationReport[]
    OverallWrongInformationResult ProductWrongInformationReportsCombinedResult?
    ///  denotes the number of days that it can be replaced, 0 means cant be replaced
    /// same for return frame
    replaceFrame                  Int
    returnFrame                   Int
    // ptag is reduntant but allows for faster query to get tags of a product
    ptags                         String[]
    Tags                          ProductTag[]
    brandId                       String                                        @db.Uuid
    Brand                         Brand                                         @relation(fields: [brandId], references: [brandId])
    TechnicalDetails              ProductTechnicalDetail[]
    IsVariantOf                   Product[]                                     @relation("variants")
    OtherVariants                 Product[]                                     @relation("variants")
    CartItems                     CartItem[]
    SavedForLaterProducts         SavedForLaterProducts[]
    OrderItems                    OrderItem[]
    Store                         Store?                                        @relation(fields: [storeId], references: [storeId])
    storeId                       String?                                       @db.Uuid
    ProductReviewsCombinedResult  ProductReviewsCombinedResult?
    ProductReviewFeature          ProductReviewFeature[]
    WishlistItem                  WishlistItem[]
    Offer                         Offer[]
    Category                      Category?                                     @relation(fields: [categoryCategoryId], references: [categoryId])
    categoryCategoryId            String?                                       @db.Uuid
}

model ProductMedia {
    productMediaId   String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
    productId        String    @db.Uuid
    Product          Product   @relation(fields: [productProductId], references: [productId])
    mediaId          String    @db.Uuid
    Media            Media     @relation(fields: [mediaId], references: [mediaId])
    productProductId String    @db.Uuid
    createdAt        DateTime  @default(now())
    updatedAt        DateTime  @updatedAt
    deletedAt        DateTime?
}

model ProductWrongInformationReportsCombinedResult {
    productWrongInformationReportsOverallId String                          @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
    name                                    String
    Product                                 Product                         @relation(fields: [productId], references: [productId])
    productId                               String                          @unique @db.Uuid
    count                                   Int
    ProductWrongInformationReports          ProductWrongInformationReport[]
    createdAt                               DateTime                        @default(now())
    updatedAt                               DateTime                        @updatedAt
    deletedAt                               DateTime?
}

model ProductWrongInformationReport {
    productWrongInformationReportId                String                                        @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
    name                                           String
    message                                        String
    userId                                         String                                        @db.Uuid
    User                                           User                                          @relation(fields: [userId], references: [id])
    productWrongInformationReportsCombinedResultId String?                                       @db.Uuid
    ProductWrongInformationReportsCombinedResult   ProductWrongInformationReportsCombinedResult? @relation(fields: [productWrongInformationReportsCombinedResultId], references: [productWrongInformationReportsOverallId])
    Product                                        Product?                                      @relation(fields: [productProductId], references: [productId])
    productProductId                               String?                                       @db.Uuid
    createdAt                                      DateTime                                      @default(now())
    updatedAt                                      DateTime                                      @updatedAt
    deletedAt                                      DateTime?
}

model ProductTag {
    productTagId String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
    name         String
    Product      Product[]
    createdAt    DateTime  @default(now())
    updatedAt    DateTime  @updatedAt
    deletedAt    DateTime?
}

model ProductDetail {
    productDetailId  String                    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
    description      String
    Media            ProductDescriptionMedia[]
    Product          Product?                  @relation(fields: [productProductId], references: [productId])
    productProductId String?                   @db.Uuid
    createdAt        DateTime                  @default(now())
    updatedAt        DateTime                  @updatedAt
    deletedAt        DateTime?
}

model ProductDescriptionMedia {
    productDescriptionMediaId      String        @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
    productDescriptionId           String        @db.Uuid
    mediaId                        String        @db.Uuid
    ProductDescriptionSingleEntity ProductDetail @relation(fields: [productDescriptionId], references: [productDetailId])
    Media                          Media         @relation(fields: [mediaId], references: [mediaId])
    createdAt                      DateTime      @default(now())
    updatedAt                      DateTime      @updatedAt
    deletedAt                      DateTime?
}

model ProductTechnicalDetail {
    technicalDetailId String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
    key               String
    value             String
    productId         String    @db.Uuid
    Product           Product   @relation(fields: [productId], references: [productId])
    createdAt         DateTime  @default(now())
    updatedAt         DateTime  @updatedAt
    deletedAt         DateTime?
}

model ProductQuestion {
    productQuestionId String                 @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
    userId            String                 @db.Uuid
    productId         String                 @db.Uuid
    upvotes           Int                    @default(0)
    downvotes         Int                    @default(0)
    content           String
    Media             ProductQuestionMedia[]
    Product           Product                @relation(fields: [productId], references: [productId])
    User              User                   @relation(fields: [userId], references: [id])
    Answers           ProductAnswer[]
    createdAt         DateTime               @default(now())
    updatedAt         DateTime               @updatedAt
    deletedAt         DateTime?
}

model ProductQuestionMedia {
    productQuestionMediaId String          @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
    questionId             String          @db.Uuid
    Question               ProductQuestion @relation(fields: [questionId], references: [productQuestionId])
    Media                  Media           @relation(fields: [mediaId], references: [mediaId])
    mediaId                String          @db.Uuid
    createdAt              DateTime        @default(now())
    updatedAt              DateTime        @updatedAt
    deletedAt              DateTime?
}

model ProductAnswer {
    productAnswerId   String               @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
    userId            String               @db.Uuid
    questionId        String               @db.Uuid
    upvotes           Int                  @default(0)
    downvotes         Int                  @default(0)
    content           String
    Media             ProductAnswerMedia[]
    User              User                 @relation(fields: [userId], references: [id])
    Question          ProductQuestion      @relation(fields: [questionId], references: [productQuestionId])
    productQuestionId String?              @db.Uuid
    createdAt         DateTime             @default(now())
    updatedAt         DateTime             @updatedAt
    deletedAt         DateTime?
}

model ProductAnswerMedia {
    productAnswerMediaId String        @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
    answerId             String        @db.Uuid
    Answer               ProductAnswer @relation(fields: [answerId], references: [productAnswerId])
    Media                Media         @relation(fields: [mediaId], references: [mediaId])
    mediaId              String        @db.Uuid
    createdAt            DateTime      @default(now())
    updatedAt            DateTime      @updatedAt
    deletedAt            DateTime?
}

model ProductReviewsCombinedResult {
    productReviewsCombinedResultsId String                                @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
    rating                          Float
    reviewsCount                    Int
    Features                        ProductFeaturesRatingCombinedResult[]
    productId                       String                                @unique @db.Uuid
    Product                         Product                               @relation(fields: [productId], references: [productId])
    productReviews                  ProductReview[]
    createdAt                       DateTime                              @default(now())
    updatedAt                       DateTime                              @updatedAt
    deletedAt                       DateTime?
}

model ProductFeaturesRatingCombinedResult {
    productFeatureRatingCombinedResultsId String                       @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
    rating                                Float
    reviewsCount                          Int
    featureId                             String                       @db.Uuid
    Feature                               ProductReviewFeature         @relation(fields: [featureId], references: [productReviewFeatureId])
    productReviewsCombinedResultsId       String                       @db.Uuid
    ProductReviewsCombinedResults         ProductReviewsCombinedResult @relation(fields: [productReviewsCombinedResultsId], references: [productReviewsCombinedResultsId])
    createdAt                             DateTime                     @default(now())
    updatedAt                             DateTime                     @updatedAt
    deletedAt                             DateTime?
}

model ProductReview {
    productReviewId                 String                        @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
    productId                       String                        @db.Uuid
    userId                          String                        @db.Uuid
    Product                         Product                       @relation(fields: [productId], references: [productId])
    User                            User                          @relation(fields: [userId], references: [id])
    /// In range of 0 to 5, using check constraint in migrate file
    overallRating                   Float
    content                         String
    Features                        ProductReviewFeatureRating[]
    Tags                            ProductReviewTag[]
    Media                           ProductReviewMedia[]
    verifiedPurchase                Boolean                       @default(false)
    ProductReviewsCombinedResult    ProductReviewsCombinedResult? @relation(fields: [productReviewsCombinedResultsId], references: [productReviewsCombinedResultsId])
    productReviewsCombinedResultsId String?                       @db.Uuid
    createdAt                       DateTime                      @default(now())
    updatedAt                       DateTime                      @updatedAt
    deletedAt                       DateTime?
}

model ProductReviewTag {
    productReviewTagId String          @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
    tag                String          @unique
    ProductReview      ProductReview[]
    createdAt          DateTime        @default(now())
    updatedAt          DateTime        @updatedAt
    deletedAt          DateTime?
}

model ProductReviewMedia {
    productReviewMediaId String        @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
    mediaId              String        @db.Uuid
    Media                Media         @relation(fields: [mediaId], references: [mediaId])
    productReviewId      String        @db.Uuid
    ProductReview        ProductReview @relation(fields: [productReviewId], references: [productReviewId])
    createdAt            DateTime      @default(now())
    updatedAt            DateTime      @updatedAt
    deletedAt            DateTime?
}

model ProductReviewFeatureRating {
    productReviewFeatureId String               @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
    productReviewId        String               @db.Uuid
    ProductReview          ProductReview        @relation(fields: [productReviewId], references: [productReviewId])
    featureId              String               @db.Uuid
    Feature                ProductReviewFeature @relation(fields: [featureId], references: [productReviewFeatureId])
    rating                 Float
    createdAt              DateTime             @default(now())
    updatedAt              DateTime             @updatedAt
    deletedAt              DateTime?
}

model ProductReviewFeature {
    productReviewFeatureId              String                                @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
    description                         String
    productId                           String                                @db.Uuid
    Product                             Product                               @relation(fields: [productId], references: [productId])
    Type                                ProductReviewFeatureType              @relation(fields: [productReviewFeatureTypeId], references: [type])
    Ratings                             ProductReviewFeatureRating[]
    ProductFeaturesRatingCombinedResult ProductFeaturesRatingCombinedResult[]
    productReviewFeatureTypeId          String                                @db.Uuid
    createdAt                           DateTime                              @default(now())
    updatedAt                           DateTime                              @updatedAt
    deletedAt                           DateTime?
}

model ProductReviewFeatureType {
    type                 String                 @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
    ProductReviewFeature ProductReviewFeature[]
    createdAt            DateTime               @default(now())
    updatedAt            DateTime               @updatedAt
    deletedAt            DateTime?
}

model LatitudeLongitude {
    latitudeLongitudeId String             @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
    lat                 Float
    long                Float
    userAddress         UserAddress[]
    WarehouseAddress    WarehouseAddress[]
    createdAt           DateTime           @default(now())
    updatedAt           DateTime           @updatedAt
    deletedAt           DateTime?
}

model City {
    id               String             @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
    name             String
    stateId          String             @db.Uuid
    State            State              @relation(fields: [stateId], references: [id])
    UserAddress      UserAddress[]
    WarehouseAddress WarehouseAddress[]
    createdAt        DateTime           @default(now())
    updatedAt        DateTime           @updatedAt
    deletedAt        DateTime?
}

model State {
    id         String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
    /// store codes when possible and if not then name, be consistent for a country
    identifier String
    countryId  String    @db.Uuid
    Country    Country   @relation(fields: [countryId], references: [id])
    City       City[]
    createdAt  DateTime  @default(now())
    updatedAt  DateTime  @updatedAt
    deletedAt  DateTime?
}

model Country {
    id        String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
    code      String    @unique @db.Char(2)
    State     State[]
    createdAt DateTime  @default(now())
    updatedAt DateTime  @updatedAt
    deletedAt DateTime?
}

model VerificationToken {
    identifier String
    type       String
    token      String    @id
    expires    DateTime
    createdAt  DateTime  @default(now())
    updatedAt  DateTime  @updatedAt
    deletedAt  DateTime?
}

model Links {
    id        String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
    url       String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}
